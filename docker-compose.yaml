services:
  # Nginx Load Balancer
  nginx:
    image: nginx
    container_name: load-balancer
    ports:
      - "8001:8001"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend1
      - backend2
      - backend3
    networks:
      - betPI

  backend1: &backend
    build: .
    container_name: betpi-backend1
    restart: always
    ports:
      - "8080"
    volumes:
      - ./:/app
    depends_on:
      - postgres_primary
    networks:
      - betPI

  backend2:
    <<: *backend
    container_name: betpi-backend2

  backend3:
    <<: *backend
    container_name: betpi-backend3

  backend-cronjob:
    <<: *backend
    container_name: backend-cronjob
    entrypoint: |
      bash -c "
        service cron start
        echo \"Cron service started\"
        tail -f /var/log/cron.log
      "

# Servidor primário (escrita)
  postgres_primary:
    image: postgres
    container_name: postgres_primary
    user: postgres
    restart: always
    healthcheck:
      test: 'pg_isready -U postgres --dbname=postgres'
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: |
      postgres
      -c wal_level=replica
      -c hot_standby=on
      -c max_wal_senders=10
      -c max_replication_slots=10
      -c hot_standby_feedback=on
    volumes:
      - ./postgres/00_init.sql:/docker-entrypoint-initdb.d/00_init.sql
      - primary_data:/var/lib/postgresql/data
    networks:
      - betPI


# Servidor réplica (leitura)
  postgres_replica:
    image: postgres
    container_name: postgres_replica
    user: postgres
    restart: always
    healthcheck:
      test: 'pg_isready -U postgres --dbname=postgres'
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - 5433:5432
    environment:
      PGUSER: replicator
      PGPASSWORD: replicator_password
    command: |
      bash -c "
      if [ -z \"$(ls -A /var/lib/postgresql/data)\" ]; then
        echo 'Data directory is empty. Initializing replica...'
        until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=postgres_primary --port=5432
        do
          echo 'Waiting for primary to connect...'
          sleep 1s
        done
        echo 'Backup done, starting replica...'
      else
        echo 'Data directory is not empty. Skipping initialization.'
      fi
      chmod 0700 /var/lib/postgresql/data
      postgres
      "
    depends_on:
      - postgres_primary
    volumes:
      - replica_data:/var/lib/postgresql/data
    networks:
      - betPI

volumes:
  primary_data:
  replica_data:
networks:
  betPI:
    driver: bridge
